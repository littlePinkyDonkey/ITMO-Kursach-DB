/*
*создание функций для основных стержневых сущностей
*/
CREATE OR REPLACE FUNCTION get_locations_and_battles() RETURNS 
TABLE(
    LOCATION_ID INTEGER, 
    LOCATION_NAME VARCHAR, 
    BATTLE_NAME VARCHAR, 
    BATTLE_ID INTEGER) AS
$body$
BEGIN
    RETURN QUERY SELECT l.LOCATION_ID, l.LOCATION_NAME, b.BATTLE_NAME, b.BATTLE_ID FROM locations AS l 
    JOIN battle_location USING(LOCATION_ID) JOIN battle AS b USING(BATTLE_ID);
END
$body$
LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_abilities_in_battle() RETURNS 
TABLE(
    BATTLE_NAME VARCHAR, 
    ABILITY_NAME VARCHAR, 
    ABILITY_DESCRIPTION VARCHAR, 
    ABILITY_TYPE ABILITY_TYPES) AS
$body$
BEGIN
    RETURN QUERY SELECT b.BATTLE_NAME, a.ABILITY_NAME, a.DESCRIPTION, a.ABILITY_TYPE FROM battle AS b 
    JOIN battle_abilities USING(BATTLE_ID) JOIN abilities AS a USING(ABILITY_ID);
END
$body$
LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_character_ablilities(char_id INTEGER) RETURNS
TABLE(
    CHARACTER_NAME VARCHAR, 
    ABILITY_NAME VARCHAR, 
    ABILITY_DESCRIPTION TEXT, 
    ABILITY_TYPE ABILITY_TYPES, 
    COMPLEXITY_LEVEL INTEGER) AS
$body$
BEGIN
    RETURN QUERY SELECT c.CHARACTER_NAME, a.ABILITY_NAME, a.DESCRIPTION, a.ABILITY_TYPE, a.COMPLEXITY_LEVEL FROM character AS c 
    JOIN characters_abilities USING(CHARACTER_ID) JOIN abilities AS a USING(ABILITY_ID) WHERE c.CHARACTER_ID = char_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_battle_info(name VARCHAR, is_battle_name BOOLEAN) RETURNS 
TABLE(
    CHARACTER_NAME VARCHAR, 
    BATTLE_NAME VARCHAR, 
    BATTLE_DURATION NUMERIC, 
    ABILITY_NAME VARCHAR, 
    ABILITY_DESCRIPTION TEXT, 
    ABILITY_TYPE ABILITY_TYPES, 
    COMPLEXITY_LEVEL INTEGER) AS
$body$
DECLARE
    table_attribute TEXT;
    table_name TEXT;
BEGIN
    IF is_battle_name IS TRUE THEN
        table_name := 'b';
        table_attribute := 'BATTLE_NAME';
    ELSE
        table_name := 'c';
        table_attribute := 'CHARACTER_NAME';
    END IF;
    RETURN QUERY EXECUTE FORMAT 
    ('SELECT c.CHARACTER_NAME, b.BATTLE_NAME, b.DURATION, a.ABILITY_NAME, a.DESCRIPTION, a.ABILITY_TYPE, a.COMPLEXITY_LEVEL 
    FROM character AS c JOIN battle_characters USING(CHARACTER_ID) JOIN battle AS b USING(BATTLE_ID) 
    JOIN battle_abilities USING(BATTLE_ID) JOIN abilities AS a USING(ABILITY_ID) 
    JOIN battle_location USING(BATTLE_ID) JOIN locations USING(LOCATION_ID) WHERE %2$I.%1$I LIKE $1', 
    table_attribute, table_name) USING name;
END
$body$ LANGUAGE plpgsql STABLE;

/*
*создание функций для работников
*/
CREATE OR REPLACE FUNCTION get_storyboarder_info(storyboarder_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT s.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM storyboard_artists AS s 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE s.WORKER_ID = storyboarder_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_producer_info(producer_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    ROLE PRODUCER_ROLES) AS
$body$
BEGIN
    RETURN QUERY SELECT p.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, p.ROLE FROM producers AS p 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE p.WORKER_ID = producer_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_audio_specialist_info(audio_specialist_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT a.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM audio_specialist AS a 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE a.WORKER_ID = audio_specialist_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_digitizer_info(digitizer_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT d.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM digitizers AS d 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE d.WORKER_ID = digitizer_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_smoothing_specialist_info(smoothing_specialist_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT s.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM smoothing_specialist AS s 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE s.WORKER_ID = smoothing_specialist_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_art_director_info(art_director_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT ad.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM art_director AS ad 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE ad.WORKER_ID = art_director_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_screenwriter_info(screenwriter_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    FILMS_NUMBER INTEGER,
    GENRES VARCHAR[]) AS
$body$
BEGIN
    RETURN QUERY 
    SELECT sw.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, sw.FILMS_NUMBER, sw.GENRES FROM screenwriters AS sw 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE sw.WORKER_ID = screenwriter_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_regisseur_info(regisseur_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    FILMS_NUMBER INTEGER,
    GENRES VARCHAR[]) AS
$body$
BEGIN
    RETURN QUERY 
    SELECT r.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, r.FILMS_NUMBER, r.GENRES FROM regisseurs AS r 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE r.WORKER_ID = regisseur_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_roles_designer_info(roles_designer_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT) AS
$body$
BEGIN
    RETURN QUERY SELECT rd.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH FROM roles_designers AS rd 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE rd.WORKER_ID = roles_designer_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_recording_actor_info(recording_actor_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    POS RECORDING_ACTORS_POSITIONS) AS
$body$
BEGIN
    RETURN QUERY SELECT ra.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, ra.POSITION FROM recording_actors AS ra 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE ra.WORKER_ID = recording_actor_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_editor_info(editor_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    GENRES VARCHAR[],
    POS EDITOR_POSITIONS) AS
$body$
BEGIN
    RETURN QUERY 
    SELECT e.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, e.GENRES, e.POSITION FROM editors AS e 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE e.WORKER_ID = editor_id;
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_artist_info(artist_id INTEGER) RETURNS 
TABLE(
    WORKER_ID INTEGER, 
    WORKER_NAME VARCHAR,
    WORKER_SECOND_NAME VARCHAR, 
    GENDER VARCHAR, 
    AGE INTEGER, 
    PLACE_OF_BIRTH TEXT,
    ARTIST_TYPE ARTIST_TYPES,
    USING_TECHNOLOGY USING_TECHNOLOGIES) AS
$body$
BEGIN
    RETURN QUERY 
    SELECT a.WORKER_ID, w.NAME, w.SECOND_NAME, w.GENDER, w.AGE, w.PLACE_OF_BIRTH, a.ARTIST_TYPE, a.USING_TECHNOLOGY FROM artists AS a 
    JOIN workers AS w USING(MAIN_WORKER_ID) WHERE a.WORKER_ID = artist_id;
END
$body$ LANGUAGE plpgsql STABLE;

/*
*создание функций для процессов
*/
CREATE OR REPLACE FUNCTION get_main_process_joined_artifacts_info() RETURNS 
TABLE(
    MAIN_PROCESS_ID INTEGER,
    DURATION INTEGER, 
    DEADLINE_DATE DATE, 
    DESCRIPTION TEXT, 
    STATUS PROCESS_STATUS, 
    ESTIMATION_TIME INTERVAL, 
    START_DATE DATE, 
    ARTIFACT_ID INTEGER, 
    ARTIFACT_TYPE ARTIFACT_TYPES, 
    SIZE INTEGER, 
    UPLOAD_DATE TIMESTAMP,
    MAIN_WORKER_ID INTEGER) AS
$body$
BEGIN
    RETURN QUERY 
    SELECT 
    mp.MAIN_PROCESS_ID, mp.DURATION, mp.DEADLINE_DATE, mp.DESCRIPTION, mp.STATUS, mp.ESTIMATION_TIME,
    mp.START_DATE, a.ARTIFACT_ID, a.ARTIFACT_TYPE, a.SIZE, a.UPLOAD_DATE, a.MAIN_WORKER_ID
    FROM processes AS mp JOIN process_artifact USING(MAIN_PROCESS_ID) 
    JOIN artifacts AS a USING(ARTIFACT_ID);
END
$body$ LANGUAGE plpgsql STABLE;

CREATE OR REPLACE FUNCTION get_storyboard_process_info(storyboard_process_id INTEGER) RETURNS 
TABLE(
    PROCESS_ID INTEGER,
    FRAME_NUMBER INTEGER,
    DURATION INTEGER, 
    DEADLINE_DATE DATE, 
    DESCRIPTION TEXT, 
    STATUS PROCESS_STATUS, 
    ESTIMATION_TIME INTERVAL, 
    START_DATE DATE, 
    ARTIFACT_ID INTEGER, 
    ARTIFACT_TYPE ARTIFACT_TYPES, 
    SIZE INTEGER, 
    UPLOAD_DATE TIMESTAMP,
    MAIN_WORKER_ID INTEGER) AS
$body$
BEGIN
    RETURN QUERY SELECT 
    sp.PROCESS_ID, sp.FRAME_NUMBER, mpa.DURATION, mpa.DEADLINE_DATE, mpa.DESCRIPTION, mpa.STATUS, mpa.ESTIMATION_TIME, 
    mpa.START_DATE, mpa.ARTIFACT_ID, mpa.ARTIFACT_TYPE, mpa.SIZE, mpa.UPLOAD_DATE, mpa.MAIN_WORKER_ID
    FROM storyboard_process AS sp JOIN get_main_process_joined_artifacts_info() AS mpa USING(MAIN_PROCESS_ID) 
    WHERE sp.PROCESS_ID=storyboard_process_id;
END
$body$ LANGUAGE plpgsql STABLE;
